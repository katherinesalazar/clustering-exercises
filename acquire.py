{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import sklearn.preprocessing\n",
    "from sklearn.model_selection import train_test_split\n",
    "import os\n",
    "\n",
    "from env import host, username, password\n",
    "\n",
    "def get_connection(db, username=username, host=host, password=password):\n",
    "    '''\n",
    "    This function uses my info from my env file to\n",
    "    create a connection url to access the Codeup db.\n",
    "    '''\n",
    "    return f'mysql+pymysql://{username}:{password}@{host}/{db}'\n",
    "\n",
    "def new_zillow_data():\n",
    "    '''\n",
    "    This function reads the zillow data from the Codeup db into a df,\n",
    "    write it to a csv file, and returns the df.\n",
    "    '''\n",
    "    # Create SQL query.\n",
    "    sql_query = ''' select *\n",
    "                    from predictions_2017 pred\n",
    "                    inner join (\n",
    "                                select parcelid, max(transactiondate) as trans_date\n",
    "                                                from predictions_2017\n",
    "                                                group by parcelid\n",
    "                                ) trans on  pred.parcelid = trans.parcelid and pred.transactiondate = trans.trans_date\n",
    "                                \n",
    "                    join properties_2017 on pred.parcelid=properties_2017.parcelid    \n",
    "                   \n",
    "                    left join airconditioningtype using (airconditioningtypeid)\n",
    "                    left join `architecturalstyletype` using (`architecturalstyletypeid`)\n",
    "                    left join `buildingclasstype` using (`buildingclasstypeid`)\n",
    "                    left join `heatingorsystemtype` using (`heatingorsystemtypeid`)\n",
    "                    left join `propertylandusetype` using (`propertylandusetypeid`)\n",
    "                    left join `storytype` using (`storytypeid`)\n",
    "                    left join `typeconstructiontype` using (`typeconstructiontypeid`)\n",
    "                    where `transactiondate` between \"2017-01-01\" and \"2017-12-31\"\n",
    "                    and `latitude` is not NULL\n",
    "                    and `longitude` is not null;\n",
    "                    '''\n",
    "    \n",
    "    # Read in DataFrame from Codeup db.\n",
    "    df = pd.read_sql(sql_query, get_connection('zillow'))\n",
    "    \n",
    "    return df\n",
    "\n",
    "def get_zillow_data(cached=False):\n",
    "    '''\n",
    "    This function reads in zillow data from Codeup database and writes data to\n",
    "    a csv file if cached == False or if cached == True reads in telco df from\n",
    "    a csv file, returns df.\n",
    "    '''\n",
    "    if cached == False or os.path.isfile('zillow.csv') == False:\n",
    "        \n",
    "        # Read fresh data from db into a DataFrame.\n",
    "        df = new_zillow_data()\n",
    "        \n",
    "        # Write DataFrame to a csv file.\n",
    "        df.to_csv('zillow.csv')\n",
    "        \n",
    "    else:\n",
    "        \n",
    "        # If csv file exists or cached == True, read in data from csv.\n",
    "        df = pd.read_csv('zillow.csv', index_col=0)\n",
    "        \n",
    "    return df\n",
    "\n",
    "def clean_zillow(df):\n",
    "    '''Takes in a df of zillow data and cleans the data by dropping null values, renaming columns, creating age column, and dealing with             outliers using 1.5x IQR    \n",
    "    \n",
    "    return: df, a cleaned pandas dataframe'''\n",
    "    \n",
    "    df = df.set_index('parcelid')  \n",
    "\n",
    "    df.replace(r'^\\s*$', np.nan, regex=True, inplace=True)\n",
    "    df = df.dropna()\n",
    "    df = df.rename(columns={\"bedroomcnt\": \"bedrooms\", \"bathroomcnt\": \"bathrooms\", \"calculatedfinishedsquarefeet\":    \n",
    "                                    \"square_feet\",\"taxamount\": \"taxes\", \"taxvaluedollarcnt\": \"tax_value\"})\n",
    "    \n",
    "    df['age_in_years'] = 2021 - df.yearbuilt\n",
    "    df['Bathrooms_cat'] = df.bathrooms.apply(lambda x: \"4+\" if x >= 4 else x)\n",
    "    df['Bedrooms_cat'] = df.bathrooms.apply(lambda x: \"4+\" if x >= 4 else x)\n",
    "    df['tax_rate'] = round(((df.taxes / df.tax_value) * 100), 2)\n",
    "    df = df.drop(columns=['yearbuilt']) \n",
    "    \n",
    "    q1 = df.tax_value.quantile(.25)\n",
    "    q3 = df.tax_value.quantile(.75)\n",
    "    iqr = q3 - q1\n",
    "    multiplier = 1.5\n",
    "    upper_bound = q3 + (multiplier * iqr)\n",
    "    lower_bound = q1 - (multiplier * iqr)\n",
    "    df = df[df.tax_value > lower_bound]\n",
    "    df = df[df.tax_value < upper_bound]\n",
    "    \n",
    "    return df"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
